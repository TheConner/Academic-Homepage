---
import './Technologies.scss';
import { chunkArray } from '../../utils/chunkArray';
const { technologiesData } = Astro.props;
import * as path from 'path';


const allImages = Astro.glob('../../assets/images/*')
const imageDict = (await allImages).reduce((acc, curr) => {
  const key = path.basename(curr.default.src).split('?')[0].split('.')[0];
  return {...acc, [key]: {...curr.default}}
})

function transpose(matrix) {
  const rows = matrix.length, cols = matrix[0].length;
  const grid = [];
  for (let j = 0; j < cols; j++) {
    grid[j] = Array(rows);
  }
  for (let i = 0; i < rows; i++) {
    for (let j = 0; j < cols; j++) {
      grid[j][i] = matrix[i][j];
    }
  }
  return grid;
}

// Seperate the technologiesData into smaller rows
const rows = technologiesData
  .filter(x => !!x)
  .map((row) => {
    if (typeof row.img === 'object') return row;
    const img = path.basename(row.img);
    const imgStart = img.split('.')[0];
    //TODO: fix when asset paths are fixed
    //row.img = `${import.meta.env.BASE_URL}assets/images/${img}`//imageDict[img];
    row.img = imageDict[imgStart];
    return row;
  });

const imageGrid = transpose(chunkArray(rows, 4))
---
<div class='technologies-container'>
  <h2 class='title'>Frequently Used Technologies</h2>
  <div class='image-container is-mobile columns is-multiline'>
    {
      imageGrid.map((row) => {
        return (
          <div class='column is-3-mobile'>
            {row.map((tile) => {
              console.log(tile)
              if (!tile) return <></>
              return (
                <a href={tile.href} target='_blank' rel='noreferrer'>
                  <img src={tile.img.src} alt={tile.alt} loading="lazy" />
                </a>
              );
            })}
          </div>
        );
      })
    }
  </div>
</div>